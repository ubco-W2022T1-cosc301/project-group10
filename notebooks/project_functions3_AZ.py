{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d4cedfd5-ad5c-4a3d-8155-d4e3c1c66ad6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "\n",
    "def load_and_process(path):\n",
    "    \n",
    "    # Load data\n",
    "    \n",
    "    df = pd.read_csv(path)\n",
    "    \n",
    "    # Clean up data\n",
    "    \n",
    "    df_winslosses = (\n",
    "                    df.loc[df[\"date\"].index.repeat(2),:].reset_index(drop=True)\n",
    "                    .drop(columns=[\"season\", \"neutral\", \"status\"])\n",
    "                    .loc[df_winslosses[\"playoff\"] == 0]\n",
    "                    .reset_index(drop=True)\n",
    "    )\n",
    "\n",
    "    # Add and drop columns\n",
    "\n",
    "    df_winslosses[\"team\"] = np.where(df_winslosses.index % 2, df_winslosses[\"away_team\"], df_winslosses[\"home_team\"] )\n",
    "    df_winslosses[\"abbr\"] = np.where(df_winslosses.index % 2, df_winslosses[\"away_team_abbr\"], df_winslosses[\"home_team_abbr\"] )\n",
    "\n",
    "    df_winslosses = df_winslosses.drop(columns=[\"home_team_abbr\", \"away_team_abbr\"])\n",
    "\n",
    "    df_winslosses[\"wins\"] = 0\n",
    "    df_winslosses[\"wins\"] = np.where((df_winslosses[\"team\"] == df_winslosses[\"home_team\"]) & (df_winslosses[\"home_team_score\"] > df_winslosses[\"away_team_score\"]), df_winslosses[\"wins\"]+1, df_winslosses[\"wins\"])\n",
    "    df_winslosses[\"wins\"] = np.where((df_winslosses[\"team\"] == df_winslosses[\"away_team\"]) & (df_winslosses[\"away_team_score\"] > df_winslosses[\"home_team_score\"]), df_winslosses[\"wins\"]+1, df_winslosses[\"wins\"])\n",
    "\n",
    "    df_winslosses[\"losses\"] = 0\n",
    "    df_winslosses[\"losses\"] = np.where((df_winslosses[\"team\"] == df_winslosses[\"home_team\"]) & (df_winslosses[\"home_team_score\"] < df_winslosses[\"away_team_score\"]) & df_winslosses[\"ot\"].isnull() , df_winslosses[\"losses\"]+1, df_winslosses[\"losses\"])\n",
    "    df_winslosses[\"losses\"] = np.where((df_winslosses[\"team\"] == df_winslosses[\"away_team\"]) & (df_winslosses[\"away_team_score\"] < df_winslosses[\"home_team_score\"]) & df_winslosses[\"ot\"].isnull(), df_winslosses[\"losses\"]+1 , df_winslosses[\"losses\"])\n",
    "\n",
    "    df_winslosses[\"otl\"] = 0\n",
    "    df_winslosses[\"otl\"] = np.where((df_winslosses[\"team\"] == df_winslosses[\"home_team\"]) & (df_winslosses[\"home_team_score\"] < df_winslosses[\"away_team_score\"]) & df_winslosses[\"ot\"].notnull() , df_winslosses[\"otl\"]+1, df_winslosses[\"otl\"])\n",
    "    df_winslosses[\"otl\"] = np.where((df_winslosses[\"team\"] == df_winslosses[\"away_team\"]) & (df_winslosses[\"away_team_score\"] < df_winslosses[\"home_team_score\"]) & df_winslosses[\"ot\"].notnull() , df_winslosses[\"otl\"]+1 , df_winslosses[\"otl\"])\n",
    "\n",
    "    df_winslosses = df_winslosses.drop(columns=[\"playoff\", \"ot\", \"overtime_prob\", \"home_team_expected_points\", \"away_team_expected_points\"])\n",
    "\n",
    "    df_winslosses = df_winslosses.sort_values(by=['team', 'date'], ascending=True)\n",
    "    df_winslosses = df_winslosses.reset_index(drop=True)\n",
    "\n",
    "    # set containing each team to iterate through later\n",
    "    team_set = set(df_winslosses[\"team\"])\n",
    "\n",
    "    df_winslosses[\"game_num\"] = 0\n",
    "\n",
    "    df_winslosses[\"gf\"] = 0\n",
    "    df_winslosses[\"gf\"] = np.where((df_winslosses[\"team\"] == df_winslosses[\"home_team\"]), df_winslosses[\"home_team_score\"], df_winslosses[\"away_team_score\"])\n",
    "                               \n",
    "    df_winslosses[\"ga\"] = 0\n",
    "    df_winslosses[\"ga\"] = np.where((df_winslosses[\"team\"] == df_winslosses[\"home_team\"]), df_winslosses[\"away_team_score\"], df_winslosses[\"home_team_score\"])                                                           \n",
    "\n",
    "    #iterate through all rows and add cumulative stats\n",
    "    \n",
    "    for team in team_set:\n",
    "    \n",
    "        count = 0\n",
    "        wins = 0\n",
    "        losses = 0\n",
    "        otls = 0\n",
    "        gf = 0\n",
    "        ga = 0\n",
    "    \n",
    "        for index in df_winslosses.index:\n",
    "            \n",
    "            if (df_winslosses.loc[index, \"team\"] == team ):\n",
    "            \n",
    "                count += 1;\n",
    "                wins += df_winslosses.loc[index, 'wins']\n",
    "                losses += df_winslosses.loc[index, 'losses']\n",
    "                otls += df_winslosses.loc[index, 'otl']\n",
    "                gf += df_winslosses.loc[index, 'gf']\n",
    "                ga += df_winslosses.loc[index, 'ga']\n",
    "            \n",
    "                df_winslosses.loc[index, 'game_num'] = count\n",
    "                df_winslosses.loc[index, 'wins'] = wins\n",
    "                df_winslosses.loc[index, 'losses'] = losses\n",
    "                df_winslosses.loc[index, 'otl'] = otls\n",
    "                df_winslosses.loc[index, 'gf'] = gf\n",
    "                df_winslosses.loc[index, 'ga'] = ga\n",
    "            \n",
    "            \n",
    "    df_winslosses['pts'] = (df_winslosses['wins'] * 2) + (df_winslosses['otl'])\n",
    "\n",
    "    return df_winslosses\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44727009-9de1-4903-94f6-ad9ecfc12520",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
